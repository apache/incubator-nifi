/*!
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

@use 'sass:map';
@use '@angular/material' as mat;
@use '../utils.scss' as utils;

@mixin styles() {
    html,
    body {
        height: 100%;
    }

    body {
        margin: 0;
        font-family: Roboto, 'Helvetica Neue', sans-serif;
    }

    .cdk-drag-disabled {
        cursor: not-allowed !important;
    }

    .cdk-drag-placeholder {
        opacity: 0;
    }

    .cdk-drop-list-dragging {
        cursor: grabbing;
    }

    a {
        font-size: 13px;
        cursor: pointer;
        font-weight: normal;
        display: inline-block;
        font-family: Roboto;
        text-decoration: underline;
        text-underline-offset: 3px;
    }

    //Icon for styling mat-icon in forms throughout the application.
    .info-icon {
        font-size: 14px;
        height: 14px !important;
        width: 14px !important;
    }

    //This style is needed due to an incompatibility between material and tailwind.
    .mdc-notched-outline__notch {
        border-right: none;
    }

    .tooltip {
        position: fixed;
        max-width: 500px;
        padding: 10px;
        border-radius: 2px;
        border-width: 1px;
        font-size: 13px;
        font-family: Roboto;
        font-weight: 400;
        word-wrap: break-word;
        white-space: normal;
        z-index: 1;

        ul {
            list-style: disc outside;
            margin-left: 1em;
        }
    }

    .property-editor {
        font-size: 13px;
        font-family: Roboto;
        font-weight: 400;
    }

    .CodeMirror-hints {
        font-size: 13px !important;
        z-index: 1000 !important;
        overflow-y: scroll !important;
    }

    .blank,
    .empty,
    .unset,
    .sensitive {
        font-weight: normal !important;
    }

    .mat-mdc-icon-button {
        --mdc-icon-button-state-layer-size: 28px;
        --mdc-icon-button-icon-size: 14px;
        line-height: var(--mdc-icon-button-state-layer-size);
        padding: 0;

        &.mat-mdc-button-base.mdc-icon-button {
            padding: 0;
        }
    }

    .pointer {
        cursor: pointer;
    }

    .flex-2 {
        display: flex;
        flex: 2;
        flex-basis: 100%;
    }

    .flex-1a {
        display: flex;
        flex-direction: column;
        flex-basis: 100%;
        flex: 1;
    }
}

@mixin generate-theme($material-theme, $nifi-theme) {
    // Get the color config from the theme.
    $material-theme-color-config: mat.get-color-config($material-theme);
    $nifi-theme-color-config: mat.get-color-config($nifi-theme);

    // Get the palettes
    $material-theme-primary-palette: map.get($material-theme-color-config, 'primary');

    // semantic classes for default/lighter/darker colors for each palette in the material theme

    .mat-primary-default-on-default-surface {
        color: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config),
            'primary'
        ) !important;
        fill: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config),
            'primary'
        ) !important;
    }

    .mat-accent-default-on-default-surface {
        color: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config),
            'accent'
        ) !important;
        fill: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config),
            'accent'
        ) !important;
    }

    .mat-warn-default-on-default-surface {
        color: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config),
            'warn'
        ) !important;
        fill: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config),
            'warn'
        ) !important;
    }

    /* other classes and overriding 3rd party styles */

    a {
        // calculate the color for text on top of a material theme primary palette default color element
        color: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($material-theme-color-config)
        );
        // get the lighter color from the material theme primary palette
        text-decoration-color: mat.get-color-from-palette($material-theme-primary-palette, 'lighter');
    }

    a:hover {
        // calculate the color for text on top of a material theme primary palette default colored element
        text-decoration-color: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($material-theme-color-config)
        );
    }

    .mat-mdc-icon-button {
        // calculate the color for text on top of a nifi theme accent palette darker colored element
        color: utils.get-color-on-surface(
            $material-theme-color-config,
            utils.get-surface($nifi-theme-color-config, 'darker')
        ) !important;
    }
}
