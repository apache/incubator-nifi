/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@use 'sass:map';
@use '@angular/material' as mat;
@use '../../../../../assets/utils.scss' as utils;

@mixin generate-theme($material-theme, $nifi-theme) {
    // Get the color config from the theme.
    $material-theme-color-config: mat.get-color-config($material-theme);
    $nifi-theme-color-config: mat.get-color-config($nifi-theme);

    // Get the palettes from the color-config.
    $material-theme-primary-palette: map.get($material-theme-color-config, 'primary');
    $material-theme-accent-palette: map.get($material-theme-color-config, 'accent');
    $nifi-theme-surface-palette: map.get($nifi-theme-color-config, 'primary');
    $nifi-theme-success-palette: map.get($nifi-theme-color-config, 'accent');
    $nifi-theme-warn-palette: map.get($nifi-theme-color-config, 'warn');

    // Get hues from palette
    $material-theme-primary-palette-lighter: mat.get-color-from-palette($material-theme-primary-palette, lighter);
    $material-theme-primary-palette-default: mat.get-color-from-palette($material-theme-primary-palette, 'default');
    $material-theme-primary-palette-darker-contrast: mat.get-color-from-palette(
        $material-theme-primary-palette,
        darker-contrast
    );
    $material-theme-accent-palette-default: mat.get-color-from-palette($material-theme-accent-palette, 'default');

    // Canvas colors
    $nifi-theme-surface-palette-default: mat.get-color-from-palette($nifi-theme-surface-palette, default);
    $nifi-theme-surface-palette-lighter: mat.get-color-from-palette($nifi-theme-surface-palette, lighter);
    $nifi-theme-surface-palette-darker: mat.get-color-from-palette($nifi-theme-surface-palette, darker);
    $nifi-theme-success-palette-lighter: mat.get-color-from-palette($nifi-theme-success-palette, lighter);
    $nifi-theme-success-palette-A700: mat.get-color-from-palette($nifi-theme-success-palette, 'A700');
    $nifi-theme-success-palette-500: mat.get-color-from-palette($nifi-theme-success-palette, 500);
    $nifi-theme-warn-palette-darker: mat.get-color-from-palette($nifi-theme-warn-palette, 'darker');
    $nifi-theme-warn-palette-800: mat.get-color-from-palette($nifi-theme-warn-palette, 800);
    $nifi-theme-warn-palette-A200: mat.get-color-from-palette($nifi-theme-warn-palette, 'A200');
    $nifi-theme-warn-palette-A400: mat.get-color-from-palette($nifi-theme-warn-palette, 'A400');
    $nifi-theme-warn-palette-A700: mat.get-color-from-palette($nifi-theme-warn-palette, 'A700');

    // Shadows should always be darker. We explicitly set this so the SVG shadows are correct in both modes.
    $drop-shadow-color: black;
    $is-dark: map-get($nifi-theme-color-config, is-dark);
    $banner-color: if(
        $is-dark,
        mat.get-color-from-palette($material-theme-primary-palette, darker),
        mat.get-color-from-palette($material-theme-primary-palette, lighter)
    );
    $banner-opacity: if($is-dark, 0.6, 0.3);

    $on-surface: utils.get-on-surface($nifi-theme-color-config);
    $on-surface-lighter: utils.get-on-surface($nifi-theme-color-config, lighter);
    $on-surface-highlight: utils.get-on-surface($nifi-theme-color-config, highlight);
    $on-surface-medium: utils.get-on-surface($nifi-theme-color-config, medium);

    .canvas-background {
        background-color: $nifi-theme-surface-palette-darker;
        background-image: linear-gradient(to right, $on-surface-highlight 1px, transparent 1px),
            linear-gradient(to bottom, $on-surface-highlight 1px, transparent 1px);
    }

    /* svg styles */

    svg.canvas-svg {
        /*
          All components
      */
        .transparent {
            fill: transparent;
        }

        g.component rect.body {
            fill: $nifi-theme-surface-palette-lighter;
        }

        g.component rect.body.unauthorized {
            fill: $nifi-theme-surface-palette-darker;
        }

        g.component rect.border,
        g.connections rect.border {
            stroke: $on-surface-lighter;
            stroke-width: if(
                $is-dark,
                2,
                1
            ); // Dark mode gets a wider stroke to provide contrast between the canvas and components
        }

        g.component rect.border.unauthorized {
            stroke: $nifi-theme-warn-palette-darker !important;
        }

        g.component rect.border.ghost {
            stroke: $nifi-theme-surface-palette-default !important;
        }

        g.component rect.processor-icon-container.unauthorized {
            fill: $nifi-theme-surface-palette-darker;
        }

        g.component.selected rect.border {
            stroke: utils.get-color-on-surface($material-theme-color-config, $nifi-theme-surface-palette-lighter);
        }

        text.stats-label {
            fill: $on-surface-medium;
        }

        text.stats-value {
            fill: utils.get-color-on-surface(
                $material-theme-color-config,
                $nifi-theme-surface-palette-lighter,
                'accent'
            );
        }

        text.stats-info {
            fill: utils.get-color-on-surface($material-theme-color-config, $nifi-theme-surface-palette-lighter);
        }

        text.bulletin-icon {
            fill: $material-theme-primary-palette-darker-contrast;
        }

        rect.bulletin-background {
            fill: $nifi-theme-warn-palette-darker;
        }

        text.active-thread-count {
            fill: $material-theme-accent-palette-default;
        }

        path.component-comments {
            fill: $on-surface-lighter;
            stroke: $on-surface-lighter;
        }

        /*
          Selection
      */

        g.component.connectable-destination rect.border {
            stroke: $nifi-theme-success-palette-500;
        }

        rect.component-selection,
        rect.drag-selection,
        rect.label-drag {
            stroke: $on-surface-medium;
            fill: transparent;
        }

        text.add-connect {
            fill: utils.get-color-on-surface($material-theme-color-config, $nifi-theme-surface-palette-lighter);
        }

        /*
          Processor
      */
        #component-drop-shadow feFlood {
            flood-color: $drop-shadow-color;
        }

        #connection-full-drop-shadow feFlood {
            flood-color: $nifi-theme-warn-palette-darker;
        }

        rect.processor-read-write-stats {
            fill: $nifi-theme-surface-palette-lighter;
        }

        rect.processor-stats-border {
            fill: $on-surface-lighter;
        }

        rect.processor-stats-in-out {
            fill: $nifi-theme-surface-palette-darker;
        }

        text.processor-name {
            fill: $on-surface;
        }

        text.processor-type {
            fill: $material-theme-primary-palette-default;
        }

        text.processor-bundle {
            fill: $nifi-theme-surface-palette-default;
        }

        rect.processor-icon-container {
            fill: $nifi-theme-surface-palette-lighter;
        }

        circle.restricted-background,
        circle.is-primary-background {
            fill: $nifi-theme-surface-palette-lighter;
        }

        text.restricted {
            fill: $nifi-theme-warn-palette-darker;
        }

        /*
          Connection
      */

        g.connection rect.body {
            fill: $nifi-theme-surface-palette-lighter;
        }

        g.connection rect.body.unauthorized {
            fill: $nifi-theme-surface-palette-darker;
        }

        g.connection rect.border.unauthorized {
            stroke: $nifi-theme-warn-palette-darker;
        }

        g.connection rect.border.full {
            stroke: $material-theme-accent-palette-default;
        }

        g.connection.selected rect.border {
            stroke: $nifi-theme-warn-palette-A700;
        }

        path.connector {
            stroke: $nifi-theme-warn-palette-800;
        }

        path.connector.connectable {
            stroke: $nifi-theme-success-palette-500;
        }

        g.connection path.connection-path {
            fill: none;
            stroke: $on-surface;
        }

        g.connection path.connection-path.full {
            stroke: $nifi-theme-warn-palette-darker;
        }

        g.connection path.connection-path.unauthorized {
            stroke: $nifi-theme-warn-palette-darker;
        }

        g.connection rect.backpressure-tick {
            fill: transparent;
        }

        g.connection rect.backpressure-tick.data-size-prediction.prediction-down,
        g.connection rect.backpressure-tick.object-prediction.prediction-down {
            fill: $nifi-theme-surface-palette-lighter;
        }

        g.connection rect.backpressure-tick.data-size-prediction,
        g.connection rect.backpressure-tick.object-prediction {
            fill: $on-surface-lighter;
        }

        g.connection rect.backpressure-tick.data-size-prediction.not-configured,
        g.connection rect.backpressure-tick.object-prediction.not-configured,
        g.connection rect.backpressure-tick.data-size-prediction.prediction-down.not-configured,
        g.connection rect.backpressure-tick.object-prediction.prediction-down.not-configured {
            fill: transparent;
        }

        g.connection rect.backpressure-tick.not-configured {
            fill: $nifi-theme-surface-palette-default;
        }

        g.connection rect.backpressure-object,
        g.connection rect.backpressure-data-size {
            fill: $on-surface-lighter;
        }

        g.connection rect.backpressure-object.not-configured,
        g.connection rect.backpressure-data-size.not-configured {
            fill: transparent;
        }

        g.connection rect.backpressure-percent {
            fill: $nifi-theme-success-palette-lighter;
        }

        g.connection rect.backpressure-percent.warning {
            fill: $nifi-theme-warn-palette-A400;
        }

        g.connection rect.backpressure-percent.error {
            fill: $nifi-theme-warn-palette-darker;
        }

        /* ghost connection */

        g.connection.ghost path.connection-path,
        g.connection.ghost rect.connection-label {
            stroke: $nifi-theme-surface-palette-default;
        }

        g.connection path.connection-selection-path {
            stroke: $nifi-theme-warn-palette-A700;
            fill: none;
        }

        g.connection path.connection-path-selectable {
            fill: none;
        }

        g.connection rect.startpoint {
            stroke: $nifi-theme-warn-palette-800;
            fill: $nifi-theme-warn-palette-800;
        }

        g.connection rect.midpoint {
            stroke: $nifi-theme-warn-palette-A700;
            fill: $nifi-theme-warn-palette-A700;
        }

        g.connection rect.endpoint {
            stroke: $nifi-theme-success-palette-A700;
            fill: $nifi-theme-success-palette-A700;
        }

        /* labels */

        g.label rect.labelpoint {
            stroke: $nifi-theme-warn-palette-A700;
            fill: $nifi-theme-warn-palette-A700;
        }

        /* funnels */

        text.funnel-icon {
            fill: $material-theme-accent-palette-default;
        }

        /* ports */

        text.port-name {
            fill: $on-surface;
        }

        text.port-icon {
            fill: $material-theme-accent-palette-default;
        }

        rect.remote-banner {
            fill: $banner-color;
            fill-opacity: $banner-opacity;
        }

        /* process groups */

        rect.process-group-stats-in-out {
            fill: $nifi-theme-surface-palette-lighter;
        }

        rect.process-group-stats-border {
            fill: $on-surface-lighter;
        }

        rect.process-group-queued-stats {
            fill: $nifi-theme-surface-palette-darker;
        }

        rect.process-group-read-write-stats {
            fill: $nifi-theme-surface-palette-darker;
        }

        rect.process-group-details-banner,
        rect.remote-process-group-details-banner,
        rect.remote-process-group-last-refresh-rect {
            fill: $banner-color;
            fill-opacity: $banner-opacity;
        }

        rect.process-group-banner,
        rect.remote-process-group-banner {
            fill: $banner-color;
        }

        text.process-group-name,
        text.remote-process-group-name {
            fill: $on-surface;
        }

        text.version-control {
            text-shadow: if($is-dark, 0 0 4px rgba(0, 0, 0, 1), 0 0 4px rgba(255, 255, 255, 1));
        }

        text.process-group-contents-count {
            fill: utils.get-color-on-surface(
                $material-theme-color-config,
                $nifi-theme-surface-palette-lighter,
                'accent'
            );
        }

        g.process-group.drop rect.border {
            stroke: $nifi-theme-success-palette-A700;
        }

        /* remote process group */

        rect.remote-process-group-stats-border {
            fill: $on-surface-lighter;
        }

        rect.remote-process-group-sent-stats {
            fill: $nifi-theme-surface-palette-darker;
        }

        rect.remote-process-group-received-stats {
            fill: $nifi-theme-surface-palette-lighter;
        }

        text.remote-process-group-uri {
            fill: utils.get-color-on-surface($material-theme-color-config, $nifi-theme-surface-palette-lighter);
        }

        text.remote-process-group-transmission-secure {
            fill: utils.get-color-on-surface($material-theme-color-config, $nifi-theme-surface-palette-lighter);
        }

        text.remote-process-group-last-refresh {
            fill: utils.get-color-on-surface($material-theme-color-config, $nifi-theme-surface-palette-lighter);
        }
    }
}
