/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@use 'sass:map';
@use '@angular/material' as mat;
@use '../../../../../assets/utils.scss' as utils;

@mixin nifi-theme($material-theme, $canvas-theme) {
    // Get the color config from the theme.
    $color-config: mat.get-color-config($material-theme);
    $canvas-color-config: mat.get-color-config($canvas-theme);

    // Get the color palette from the color-config.
    $primary-palette: map.get($color-config, 'primary');
    $accent-palette: map.get($color-config, 'accent');
    $warn-palette: map.get($color-config, 'warn');
    $canvas-primary-palette: map.get($canvas-color-config, 'primary');
    $canvas-accent-palette: map.get($canvas-color-config, 'accent');
    $canvas-warn-palette: map.get($canvas-color-config, 'warn');

    // Get hues from palette
    $primary-palette-lighter: mat.get-color-from-palette($primary-palette, lighter);
    $primary-palette-default: mat.get-color-from-palette($primary-palette, 'default');
    $primary-palette-lighter-contrast: mat.get-color-from-palette($primary-palette, lighter-contrast);
    $primary-palette-default-contrast: mat.get-color-from-palette($primary-palette, 'default-contrast');
    $accent-palette-default: mat.get-color-from-palette($accent-palette, 'default');
    $accent-palette-darker: mat.get-color-from-palette($accent-palette, 'darker');

    // Canvas colors
    $canvas-primary-palette-500: mat.get-color-from-palette($canvas-primary-palette, 500);
    $canvas-primary-palette-A100: mat.get-color-from-palette($canvas-primary-palette, A100);
    $canvas-primary-palette-A200: mat.get-color-from-palette($canvas-primary-palette, 'A200');
    $canvas-primary-palette-A700: mat.get-color-from-palette($canvas-primary-palette, 'A700');
    $canvas-accent-palette-lighter: mat.get-color-from-palette($canvas-accent-palette, lighter);
    $canvas-accent-palette-default: mat.get-color-from-palette($canvas-accent-palette, default);
    $canvas-accent-palette-darker: mat.get-color-from-palette($canvas-accent-palette, darker);
    $canvas-accent-palette-A700: mat.get-color-from-palette($canvas-accent-palette, 'A700');
    $canvas-accent-palette-500: mat.get-color-from-palette($canvas-accent-palette, 500);
    $canvas-warn-palette-800: mat.get-color-from-palette($canvas-warn-palette, 800);
    $canvas-warn-palette-A200: mat.get-color-from-palette($canvas-warn-palette, 'A200');
    $canvas-warn-palette-A400: mat.get-color-from-palette($canvas-warn-palette, 'A400');
    $canvas-warn-palette-A700: mat.get-color-from-palette($canvas-warn-palette, 'A700');
    $warn-palette-400: mat.get-color-from-palette($warn-palette, 400);
    $warn-palette-700: mat.get-color-from-palette($warn-palette, 700);
    $warn-palette-lighter: mat.get-color-from-palette($warn-palette, lighter);
    $warn-palette-default: mat.get-color-from-palette($warn-palette, 'default');
    $warn-palette-darker: mat.get-color-from-palette($warn-palette, 'darker');

    // Shadows should always be darker. We explicitly set this so the SVG shadows are correct in both modes.
    $drop-shadow-color: black;
    $is-dark: map-get($canvas-color-config, is-dark);

    $surface: utils.get-surface($canvas-color-config);
    $surface-darker: utils.get-surface($canvas-color-config, darker);
    $on-surface: utils.get-on-surface($canvas-color-config);
    $on-surface-lighter: utils.get-on-surface($canvas-color-config, lighter);
    $on-surface-medium: utils.get-on-surface($canvas-color-config, medium);
    $surface-alt: utils.get-surface($canvas-color-config, default, 'accent');

    .canvas-background {
        background-color: $surface-darker;
        background-image: linear-gradient(to right, $surface-alt 1px, transparent 1px),
            linear-gradient(to bottom, $surface-alt 1px, transparent 1px);
    }

    /* svg styles */

    svg.canvas-svg {
        text.unset {
            fill: $canvas-primary-palette-500;
        }

        /*
          All components
      */
        .transparent {
            fill: transparent;
        }

        .warn-lighter {
            fill: $warn-palette-lighter;
        }

        .warn-400 {
            fill: $warn-palette-400;
        }

        .warn-default {
            fill: $warn-palette-default;
        }

        .canvas-primary-500 {
            fill: $canvas-primary-palette-500;
        }

        .canvas-accent-lighter {
            fill: $canvas-accent-palette-lighter;
        }

        .canvas-primary-lighter {
            fill: $canvas-primary-palette-A200;
        }

        .canvas-accent-darker {
            fill: $canvas-accent-palette-darker;
        }

        .canvas-warn-A200 {
            fill: $canvas-warn-palette-A200;
        }

        .primary-lighter {
            fill: $primary-palette-lighter;
        }

        .primary-default {
            fill: $primary-palette-default;
        }

        .on-surface {
            fill: $on-surface;
        }

        .canvas-primary-palette-500 {
            fill: $canvas-primary-palette-500;
        }

        .surface-darker {
            fill: $surface-darker;
        }

        .surface {
            fill: $surface;
        }

        .primary-contrast-A700 {
            fill: $canvas-primary-palette-A700;
        }

        g.component rect.body {
            fill: $surface;
        }

        g.component rect.body.unauthorized {
            fill: $surface-darker;
        }

        g.component rect.border,
        g.connections rect.border {
            stroke: $on-surface-lighter;
            stroke-width: if(
                $is-dark,
                2,
                1
            ); // Dark mode gets a wider stroke to provide contrast between the canvas and components
        }

        g.component rect.border.unauthorized {
            stroke: $warn-palette-darker !important;
        }

        g.component rect.border.ghost {
            stroke: $canvas-primary-palette-500 !important;
        }

        g.component rect.processor-icon-container.unauthorized {
            fill: $surface-darker;
        }

        g.component.selected rect.border {
            stroke: utils.get-color-on-surface($color-config, $surface);
        }

        text.stats-label {
            fill: $on-surface-medium;
        }

        text.stats-value {
            fill: utils.get-color-on-surface($color-config, $surface, 'accent');
        }

        text.stats-info {
            fill: utils.get-color-on-surface($color-config, $surface);
        }

        text.bulletin-icon {
            fill: $surface;
        }

        rect.bulletin-background {
            fill: utils.get-color-on-surface($color-config, $surface, 'warn');
        }

        text.active-thread-count-icon {
            fill: $primary-palette-default;
        }

        text.active-thread-count {
            fill: $accent-palette-darker;
        }

        path.component-comments {
            fill: $canvas-primary-palette-A200;
            stroke: $canvas-primary-palette-A200;
        }

        /*
          Selection
      */

        g.component.connectable-destination rect.border {
            stroke: $canvas-accent-palette-500;
        }

        rect.component-selection,
        rect.drag-selection,
        rect.label-drag {
            stroke: $on-surface-medium;
            fill: transparent;
        }

        text.add-connect {
            fill: utils.get-color-on-surface($color-config, $surface);
        }

        /*
          Processor
      */
        #component-drop-shadow feFlood {
            flood-color: $drop-shadow-color;
        }

        #connection-full-drop-shadow feFlood {
            flood-color: $warn-palette-default;
        }

        rect.processor-read-write-stats {
            fill: $surface;
        }

        rect.processor-stats-border {
            fill: $on-surface-lighter;
        }

        rect.processor-stats-in-out {
            fill: $surface-darker;
        }

        text.processor-name {
            fill: $on-surface-medium;
        }

        text.processor-type {
            fill: utils.get-color-on-surface($color-config, $surface, 'accent');
        }

        text.processor-bundle {
            fill: $canvas-primary-palette-A700;
        }

        rect.processor-icon-container {
            fill: $surface;
        }

        circle.restricted-background,
        circle.is-primary-background {
            fill: $surface;
        }

        text.restricted {
            fill: $warn-palette-default;
        }

        /*
          Connection
      */

        g.connection rect.body {
            fill: $surface;
        }

        g.connection rect.body.unauthorized {
            fill: $surface-darker;
        }

        g.connection rect.border.unauthorized {
            stroke: $warn-palette-default;
        }

        g.connection rect.border.full {
            stroke: $accent-palette-darker;
        }

        g.connection.selected rect.border {
            stroke: $canvas-warn-palette-A700;
        }

        path.connector {
            stroke: $warn-palette-700;
        }

        path.connector.connectable {
            stroke: $canvas-accent-palette-500;
        }

        g.connection path.connection-path {
            fill: none;
            stroke: $on-surface;
        }

        g.connection path.connection-path.full {
            stroke: $warn-palette-default;
        }

        g.connection path.connection-path.unauthorized {
            stroke: $warn-palette-default;
        }

        text.connection-from-run-status,
        text.connection-to-run-status,
        text.expiration-icon,
        text.load-balance-icon,
        text.penalized-icon {
            fill: $primary-palette-default;
        }

        text.load-balance-icon-active {
            fill: $accent-palette-darker;
        }

        text.connection-from-run-status.is-missing-port,
        text.connection-to-run-status.is-missing-port {
            fill: $canvas-warn-palette-A200;
        }

        g.connection rect.backpressure-tick {
            fill: transparent;
        }

        g.connection rect.backpressure-tick.data-size-prediction.prediction-down,
        g.connection rect.backpressure-tick.object-prediction.prediction-down {
            fill: $surface;
        }

        g.connection rect.backpressure-tick.data-size-prediction,
        g.connection rect.backpressure-tick.object-prediction {
            fill: $canvas-primary-palette-A200;
        }

        g.connection rect.backpressure-tick.data-size-prediction.not-configured,
        g.connection rect.backpressure-tick.object-prediction.not-configured,
        g.connection rect.backpressure-tick.data-size-prediction.prediction-down.not-configured,
        g.connection rect.backpressure-tick.object-prediction.prediction-down.not-configured {
            fill: transparent;
        }

        g.connection rect.backpressure-tick.not-configured {
            fill: $canvas-primary-palette-500;
        }

        g.connection rect.backpressure-object,
        g.connection rect.backpressure-data-size {
            fill: $on-surface-lighter;
        }

        g.connection rect.backpressure-object.not-configured,
        g.connection rect.backpressure-data-size.not-configured {
            fill: transparent;
        }

        g.connection rect.backpressure-percent {
            fill: $canvas-accent-palette-default;
        }

        g.connection rect.backpressure-percent.warning {
            fill: $canvas-warn-palette-A400;
        }

        g.connection rect.backpressure-percent.error {
            fill: $warn-palette-default;
        }

        /* ghost connection */

        g.connection.ghost path.connection-path,
        g.connection.ghost rect.connection-label {
            stroke: $canvas-primary-palette-500;
        }

        g.connection path.connection-selection-path {
            stroke: $canvas-warn-palette-A700;
            fill: none;
        }

        g.connection path.connection-path-selectable {
            fill: none;
        }

        g.connection rect.startpoint {
            stroke: $canvas-warn-palette-800;
            fill: $canvas-warn-palette-800;
        }

        g.connection rect.midpoint {
            stroke: $canvas-warn-palette-A700;
            fill: $canvas-warn-palette-A700;
        }

        g.connection rect.endpoint {
            stroke: $canvas-accent-palette-A700;
            fill: $canvas-accent-palette-A700;
        }

        /* labels */

        g.label rect.labelpoint {
            stroke: $canvas-warn-palette-A700;
            fill: $canvas-warn-palette-A700;
        }

        /* funnels */

        text.funnel-icon {
            fill: $accent-palette-default;
        }

        /* ports */

        text.port-name {
            fill: $on-surface-medium;
        }

        text.port-icon {
            fill: $accent-palette-default;
        }

        rect.remote-banner {
            fill: $surface-alt;
        }

        text.port-transmission-icon {
            fill: utils.get-color-on-surface($color-config, $surface-alt);
        }

        /* process groups */

        rect.process-group-stats-in-out {
            fill: $surface;
        }

        rect.process-group-stats-border {
            fill: $on-surface-lighter;
        }

        rect.process-group-queued-stats {
            fill: $surface-darker;
        }

        rect.process-group-read-write-stats {
            fill: $surface-darker;
        }

        rect.process-group-details-banner,
        rect.remote-process-group-details-banner,
        rect.remote-process-group-last-refresh-rect {
            fill: $surface-alt;
        }

        text.version-control {
            text-shadow: 0 0 4px $surface;
        }

        $pg-surface: utils.ensure-contrast(
            $primary-palette-default,
            $primary-palette-default-contrast,
            $primary-palette-lighter
        );
        rect.process-group-banner,
        rect.remote-process-group-banner {
            fill: $pg-surface;
        }

        text.process-group-name,
        text.remote-process-group-name {
            fill: utils.ensure-contrast($primary-palette-default-contrast, $pg-surface, $on-surface-medium);
        }

        text.process-group-contents-count {
            fill: utils.get-color-on-surface($color-config, $surface, 'accent');
        }

        g.process-group.drop rect.border {
            stroke: $canvas-accent-palette-A700;
        }

        text.process-group-contents-icon {
            fill: $primary-palette-default;
        }

        /* remote process group */

        rect.remote-process-group-stats-border {
            fill: $on-surface-lighter;
        }

        rect.remote-process-group-sent-stats {
            fill: $surface-darker;
        }

        rect.remote-process-group-received-stats {
            fill: $surface;
        }

        text.remote-process-group-uri {
            fill: utils.get-color-on-surface($color-config, $surface);
        }

        text.remote-process-group-transmission-status {
            fill: $primary-palette-default-contrast;
        }

        text.remote-process-group-transmission-secure {
            fill: utils.get-color-on-surface($color-config, $surface);
        }

        text.remote-process-group-last-refresh {
            fill: utils.get-color-on-surface($color-config, $surface);
        }
    }
}
